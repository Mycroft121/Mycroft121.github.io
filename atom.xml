<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-04-20T15:34:43.602Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>ChenCheng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>4.20笔记</title>
    <link href="http://yoursite.com/2016/04/20/4-20%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2016/04/20/4-20笔记/</id>
    <published>2016-04-20T15:32:41.000Z</published>
    <updated>2016-04-20T15:34:43.602Z</updated>
    
    <content type="html">&lt;p&gt;计划改写一边，明天装机，安装好数据库和vs&lt;/p&gt;
</content>
    
    <summary type="html">
    
      毕业论文倒计时
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>4.19笔记</title>
    <link href="http://yoursite.com/2016/04/20/4-19%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2016/04/20/4-19笔记/</id>
    <published>2016-04-19T17:18:36.000Z</published>
    <updated>2016-04-19T17:19:39.926Z</updated>
    
    <content type="html">&lt;p&gt;js的跨域:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;www.a.com/a.js
www.a.com/c/b.js

www.a.com
www.b.com

ajax : XMLHttpRequest();  :   不能跨域的

1.document.domain = &amp;apos;a.com&amp;apos;;

2.服务器代理 : XMLHttpRequest代理文件

3.script标签 : jsonp

4.location.hash

5.window.name

6.flash

7.html5 postMessage
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      4.19笔记js跨域
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>4.18笔记</title>
    <link href="http://yoursite.com/2016/04/19/4-18%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2016/04/19/4-18笔记/</id>
    <published>2016-04-18T17:02:10.000Z</published>
    <updated>2016-04-18T17:06:26.910Z</updated>
    
    <content type="html">&lt;pre&gt;&lt;code&gt;console.log(123);

var i = 0;
setInterval(function(){
    i++;
    console.log(i);
},1000)

    console.group(&amp;apos;第一组&amp;apos;);
    console.log(1);
    console.groupEnd();

    console.group(&amp;apos;第二组&amp;apos;);
    console.log(2);
    console.groupEnd();

window.onload = function(){
        var oDiv = document.getElementById(&amp;apos;div1&amp;apos;);

        console.dirxml(oDiv);//显示当前元素的代码结构
    }

var a = 0;
    console.assert(a);

    console.assert(20 == &amp;apos;20&amp;apos;);

console.trace();

console.time(&amp;apos;计时器&amp;apos;);

    for(var i=0;i&amp;lt;100000;i++){
    }

    console.timeEnd(&amp;apos;计时器&amp;apos;);


    function a(){
        for(var i=0;i&amp;lt;10;i++){
            b();
        }
        for(var i=0;i&amp;lt;5;i++){
            c(); 
        }

        function b(){
            var b = 10;
        }

        function c(){
            var c = 20; 
        }
    }

    console.profile();
    a();
    console.profileEnd();
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      4.18笔记firebug
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>4.17笔记</title>
    <link href="http://yoursite.com/2016/04/17/4-17%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2016/04/17/4-17笔记/</id>
    <published>2016-04-17T14:25:38.000Z</published>
    <updated>2016-04-17T14:26:08.686Z</updated>
    
    <content type="html">&lt;p&gt;历史管理&lt;br&gt;onhashchange : 改变hash值来管理&lt;br&gt;history :&lt;br&gt;    -pushState:三个参数:数据 标题(都没有实现) 地址(可选)&lt;br&gt;    -popstate事件:读取数据 event.state&lt;br&gt;    -注意:网址是虚假的，需要在服务器指定对应页面，不然刷新也找不到&lt;/p&gt;
</content>
    
    <summary type="html">
    
      4.17笔记
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>4.16笔记</title>
    <link href="http://yoursite.com/2016/04/16/4-16%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2016/04/16/4-16笔记/</id>
    <published>2016-04-16T15:27:16.000Z</published>
    <updated>2016-04-16T15:35:11.523Z</updated>
    
    <content type="html">&lt;p&gt; console.time(‘hello’);&lt;br&gt; for(var i = 0;i&amp;lt;5000;i++){&lt;br&gt;    oDiv.innerHTML += ‘a’;&lt;br&gt;    }&lt;br&gt; console.timeEnd(‘hello’);&lt;/p&gt;
&lt;p&gt;var oDiv = document.getElementById();&lt;br&gt;            var oInput = document.getElementById();&lt;br&gt;            var oUl = document.getElementById();&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var doc = document;
var oDiv = doc.getElementById();
var oInput = doc.getElementById();
var oUl = doc.getElementById();

childNodes -&amp;gt; 元素节点、文本节点
children -&amp;gt; 元素节点

firstChild
firstElementChild

var oUl = document.getElementById(&amp;apos;ul1&amp;apos;);
var aLi = oUl.getElementsByTagName(&amp;apos;li&amp;apos;);

var aLi = document.querySelectorAll(&amp;apos;#ul1 li&amp;apos;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;oLi.style.width = ‘100px’;&lt;br&gt;oLi.style.height = ‘100px’;&lt;br&gt;oLi.style.background = ‘red’;&lt;br&gt;oLi.style.cssText = ‘width:100px;height:100px;background:red’;&lt;/p&gt;
&lt;p&gt;window.onload = function(){&lt;br&gt;            var oDiv = document.getElementById(‘div1’);&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    var L = oDiv.offsetLeft;
    var T = oDiv.offsetTop;

    setInterval(function(){

        L++;
        T++;

        oDiv.style.left = L + &amp;apos;px&amp;apos;;
        oDiv.style.top = T + &amp;apos;px&amp;apos;;
    },30);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;window.onload = function(){&lt;br&gt;            var oUl = document.getElementById(‘ul1’);&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    var oFrag = document.createDocumentFragment();

    console.time(&amp;apos;hello&amp;apos;);
    for(var i=0;i&amp;lt;5000;i++){
        var oLi = document.createElement(&amp;apos;li&amp;apos;);
        oFrag.appendChild(oLi);
    }
    oUl.appendChild(oFrag);
    console.timeEnd(&amp;apos;hello&amp;apos;);
}
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      4.16笔记
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>4.15笔记</title>
    <link href="http://yoursite.com/2016/04/15/4-15%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2016/04/15/4-15笔记/</id>
    <published>2016-04-15T13:54:32.000Z</published>
    <updated>2016-04-15T14:01:30.140Z</updated>
    
    <content type="html">&lt;p&gt;/*&lt;br&gt;                ie/chrome : onmousewheel&lt;br&gt;                    event.wheelDelta&lt;br&gt;                        上 : 120&lt;br&gt;                        下 : -120&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    firefox : DOMMouseScroll 必须用addEventListener
        ev.detail
            上 : -3
            下 ：3

    return false 阻止的是 obj.on事件名称 = fn 所触发的默认事件;
    addEventListener绑定的时间需要通过event下面的preventDefault;

*/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;/*&lt;br&gt;        cookie : 存储数据，当用户访问了某个网站（网页）的时候，我们就可以通过cookie来向访问者电脑上存储数据&lt;br&gt;            1.不同的浏览器存放的cookie位置不一样，也是不能通用的&lt;br&gt;            2.cookie的存储是以域名的形式进行区分的&lt;br&gt;            3.cookie的数据可以设置名字的 j.name = leo&lt;br&gt;            4.一个域名下存放的cookie的个数是有限制的，不同的浏览器存放的个数不一样&lt;br&gt;            5.每个cookie存放的内容大小也是有限制的，不同的浏览器存在大小不一样&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    我们通过document.cookie来获取当前网站下的cookie的时候，得到的字符串形式的值，他包含了当前网站下所有的cookie。他会把所有的cookie通过一个分号+空格的形式串联起来

    如果我们想长时间存放一个cookie。需要在设置这个cookie的时候，同时还要给他设置一个过期的时间
    cookie默认临时存储的，当浏览器关闭进程的时候字的销毁
*/
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      4.15笔记
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>4.14笔记</title>
    <link href="http://yoursite.com/2016/04/14/4-14%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2016/04/14/4-14笔记/</id>
    <published>2016-04-14T15:24:39.000Z</published>
    <updated>2016-04-14T16:26:46.501Z</updated>
    
    <content type="html">&lt;p&gt;onmousedown : 选择元素&lt;br&gt;onmousemove : 移动元素&lt;br&gt;onmouseup : 释放元素&lt;br&gt;/&lt;em&gt;&lt;br&gt;                1.拖拽的时候，如果有文字被选中，会产生问题&lt;br&gt;                    原因: 当鼠标按下的时候，如果页面中有文字被选中，那么会触发浏览器默认的文字拖拽效果&lt;br&gt;                    解决:&lt;br&gt;                        标准 : 阻止默认行为&lt;br&gt;                        ie : 
            &lt;/em&gt;/&lt;br&gt;释放全局捕获 releaseCapture();&lt;/p&gt;
&lt;p&gt;/设置全局捕获，当我们给一个元素设置全局捕获以后，那么这个元素就会监听后续发生的所有事件，当有事件发生的时候，就会被当前设置了全局捕获的元素所触发&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/*
    ie : 有，并且有效果
    ff : 有，但是没效果
    chrome : 没有
*/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;/&lt;em&gt;&lt;br&gt;                1.拖拽的时候，如果有文字被选中，会产生问题&lt;br&gt;                    原因: 当鼠标按下的时候，如果页面中有文字被选中，那么会触发浏览器默认的文字拖拽效果&lt;br&gt;                    解决:&lt;br&gt;                        标准 : 阻止默认行为&lt;br&gt;                        非标准ie :&lt;br&gt;                    拖拽图片会有问题，原因，解决方法同上
            &lt;/em&gt;/&lt;/p&gt;
</content>
    
    <summary type="html">
    
      4.14笔记
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>4.13笔记</title>
    <link href="http://yoursite.com/2016/04/13/4-13%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2016/04/13/4-13笔记/</id>
    <published>2016-04-13T15:00:25.000Z</published>
    <updated>2016-04-13T15:05:21.355Z</updated>
    
    <content type="html">&lt;p&gt;/&lt;em&gt;&lt;br&gt;    事件冒泡 : 当一个元素接收到事件的时候，会把他接收到的所有传播给他的父级，一直到顶层window。事件冒泡机制
&lt;/em&gt;/&lt;br&gt;阻止冒泡 : 当前要阻止冒泡的事件函数中调用 event.cancelBubble = true&lt;/p&gt;
&lt;p&gt;//给一个对象绑定一个事件处理函数的第一种形式&lt;br&gt;        //obj.onclick = fn;&lt;br&gt;        function fn1(){&lt;br&gt;            alert(1);&lt;br&gt;        }&lt;br&gt;        function fn2(){&lt;br&gt;            alert(1);&lt;br&gt;        }&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;document.onclick = fn1;
document.onclick = fn2;//会覆盖前面绑定的fn1

//给对象的同一个事件绑定多个不同的函数
//给一个元素绑定事件函数的第二种形式

/*
    ie: obj.attachEvent(事件名称，事件函数);
        1.没有捕获
        2.事件名称有on
        3.事件函数执行的顺序 : 标准ie-&amp;gt;正序 非标准ie-&amp;gt;倒序
        4.this指向window
    标准: obj.addEventListener(事件名称，事件函数，是否捕获);
        1.有捕获
        2.事件名称没有on
        3.事件执行的顺序是正序
        4.this触发该事件的对象
*/

// document.attachEvent(&amp;apos;onclick&amp;apos;,function(){
//     fn1.call(document);
// });
// document.attachEvent(&amp;apos;onclick&amp;apos;,fn2);

//是否捕获 : 默认是false  false:冒泡 true:捕获

//document.addEventListener(&amp;apos;click&amp;apos;,fn1,false);

function bind(obj,evname,fn){
    if(obj.addEventListener){
        obj.addEventListener(evname,fn,false);
    }else{
        obj.attachEvent(&amp;apos;on&amp;apos;+evname,function(){
            fn.call(obj);
        });
    }
}

bind(documnt,&amp;apos;click&amp;apos;,fn1);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;//call 函数下的一个方法,call方法第一个参数可以改变函数执行过程中的内部this的指向,call方法的第二个参数开始就是原来函数的参数列表&lt;/p&gt;
&lt;p&gt;第一种事件绑定形式的取消&lt;br&gt;        /&lt;em&gt;&lt;br&gt;            ie : obj.detachEvent(事件名称，事件函数);&lt;br&gt;            标准 : obj.removeEventListener(事件名称，事件函数，是否捕获);
        &lt;/em&gt;/&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/*
    onkeydown : 当键盘按键按下的时候触发
    onkeyup : 当键盘按键抬起的时候触发

    event.keyCode : 数字类型 键盘按键的值 键值
        ctrlKey,shiftKey,altKey 布尔值
        当一个事件发生的时候，如果ctrl || shift || alt 是按下的状态，返回true, 否则返回false
*/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;//不是所有元素都能够接收键盘事件，能够相应用户输入的元素，能够接收焦点的元素就能够接收键盘事件&lt;br&gt;//onkeydown : 如果按下不抬起，那么就会连续触发&lt;/p&gt;
&lt;p&gt;oncontextmenu : 右键菜单事件，当右键菜单(环境菜单)显示出来的时候触发&lt;/p&gt;
</content>
    
    <summary type="html">
    
      4.13笔记
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>4.12笔记</title>
    <link href="http://yoursite.com/2016/04/12/4-12%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2016/04/12/4-12笔记/</id>
    <published>2016-04-12T15:55:17.000Z</published>
    <updated>2016-04-12T16:04:28.907Z</updated>
    
    <content type="html">&lt;p&gt;/&lt;em&gt;&lt;br&gt;    onsubmit: 事件 当提交表单的时候触发&lt;br&gt;        submit(): 方法 提交表单
&lt;/em&gt;/&lt;br&gt;/&lt;em&gt;&lt;br&gt;    onreset: 事件 当表单重置的时候触发&lt;br&gt;        reset(): 方法 提交表单
&lt;/em&gt;/&lt;br&gt;open(页面的地址url,打开的方式) 方法 打来一个新的窗口(页面)&lt;br&gt;如果url为空，则默认打开一个空白页面&lt;br&gt;如果打开方式为空，默认为新窗口方式打开&lt;br&gt;返回值：返回新返回的窗口的window对象&lt;br&gt;//window.close();&lt;br&gt;    /&lt;em&gt;&lt;br&gt;        1.ff：默认无法关闭&lt;br&gt;        2.chrome：默认直接关闭&lt;br&gt;        3.ie：询问用户
    &lt;/em&gt;/&lt;br&gt;opener.close();&lt;br&gt;    //可以关闭在本窗口中通过js打开的新建窗口&lt;/p&gt;
&lt;p&gt;/&lt;em&gt;&lt;br&gt;            window.navigator.userAgent -&amp;gt;浏览器信息
        &lt;/em&gt;/&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//alert(window.navigator.userAgent);

/*if(window.navigator.userAgent.indexOf(&amp;apos;MSIE&amp;apos;)!= -1){
    alert(&amp;apos;我是ie&amp;apos;);
}else{
    alert(&amp;apos;我不是ie&amp;apos;);
}*/

/*
    window.location: 浏览器地址信息
*/

var arr = [1,2,3];
//alert(typeof arr);

//alert(window.location);

//window.location.href: url
//alert(window.location.href);

//window.location.search : url?后面的内容
//alert(window.location.search);

//window.location.hash : url#后面的内容
//alert(window.location.hash);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可视区的尺寸&lt;br&gt;    document.documentElement.clientWidth&lt;br&gt;    document.documentElement.clientHeight&lt;/p&gt;
&lt;p&gt;滚动条滚动距离&lt;br&gt;    document.documentElement.scrollTop&lt;br&gt;/*&lt;/p&gt;
&lt;p&gt;onscroll: 当滚动条滚动的时候触发&lt;br&gt;onresize: 当窗口大小发生改变的时候触发&lt;/p&gt;
&lt;p&gt;焦点 : 使浏览器能够区分用户输入的对象，当一个元素有焦点的时候，那么他就可以接受用户的输入。&lt;br&gt;我们可以通过一些方式给元素设置焦点&lt;br&gt;    1.点击&lt;br&gt;    2.tab&lt;br&gt;    3.js&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;不是所有元素都能接收焦点的，能够响应用户操作的元素才有焦点
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;*/&lt;/p&gt;
&lt;p&gt;onfocus : 当元素获取到焦点的时候触发&lt;br&gt;onblur : 当元素失去焦点的时候触发&lt;/p&gt;
&lt;p&gt;obj.focus() 给指定的元素设置焦点&lt;br&gt;obj.blur() 取消指定元素的焦点&lt;br&gt;obj.select() 选择指定元素里面的文本内容内容&lt;/p&gt;
&lt;p&gt;event : 事件对象，当一个事件发生的时候，和当前这个对象发生的这个事件有关的一些详细的信息都会被临时保存到一个指定的-event对象，供我们在需要的调试。飞机-黑匣子&lt;/p&gt;
&lt;p&gt;事件对象必须在一个事件调用的函数里面使用才有内容&lt;br&gt;事件函数 : 事件调用的函数&lt;/p&gt;
&lt;p&gt;兼容&lt;br&gt;ie/chrome : event是一个内置全局对象&lt;br&gt;ff : 事件对象是通过事件函数的第一个参数传入的&lt;/p&gt;
&lt;p&gt;如果一个函数是被事件调用的，那么这个函数定义的第一个参数就是事件对象&lt;/p&gt;
&lt;p&gt;clientX[Y] : 鼠标到页面可视区的距离&lt;/p&gt;
</content>
    
    <summary type="html">
    
      4.12笔记
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>4.11笔记</title>
    <link href="http://yoursite.com/2016/04/11/4-11%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2016/04/11/4-11笔记/</id>
    <published>2016-04-11T15:36:15.000Z</published>
    <updated>2016-04-11T15:50:03.634Z</updated>
    
    <content type="html">&lt;p&gt;window.onload = function(){&lt;br&gt;            var oDiv1 = document.getElementById(‘div1’);&lt;br&gt;            var oDiv2 = document.getElementById(‘div2’);&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    addClass(oDiv1,&amp;apos;box&amp;apos;);
    removeClass(oDiv2,&amp;apos;box1&amp;apos;);

    function addClass(obj,className){
        //如果原来没有class
        if(obj.className==&amp;apos;&amp;apos;){
            obj.className = className;
        }else{
        //如果原本有calss
            //如果要添加的class在原来的class中不存在
            var arrClassName = obj.className.split(&amp;apos; &amp;apos;);
            var _index = arrIndexOf(arrClassName,className);
            //obj.className += &amp;apos; &amp;apos;+ className;
            if (_index ==-1) {
                //如果添加的class在原来的class中存在
                obj.className += &amp;apos; &amp;apos;+className;
            }                        
                //如果要添加的class在原来的class中存在
        }
    }

    function removeClass(obj,className){
        //如果原来有class
        if(obj.class !=&amp;apos;&amp;apos;){
            var arrClassName = obj.className.split(&amp;apos; &amp;apos;);
            var _index = arrIndexOf(arrClassName,className);
            //如果有我们要移除的class
            if (_index != -1) {
                arrClassName.splice(_index,1);
                obj.className = arrClassName.join(&amp;apos; &amp;apos;);
            }
        }
        //如果原来没有class
    }    

    function arrIndexOf(arr, v){
        for(var i = 0;i&amp;lt; arr.length;i++){
            if (arr[i] == v) {
                return i;
            }
        }
        return -1;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;/&lt;em&gt;&lt;br&gt;        thead    :  表格头&lt;br&gt;        tBodies    :  表格正文&lt;br&gt;        tFoot    :  表格尾&lt;br&gt;            rows    :  行&lt;br&gt;            rows    :  列
&lt;/em&gt;/&lt;/p&gt;
&lt;p&gt;//onchange：当值发生改变的时候触发&lt;br&gt;            /&lt;em&gt;&lt;br&gt;                text : 当光标移开的时候，内容有变化就会触发&lt;br&gt;                radio/checkbox : 标准下点击的时候只要值变了就会触发&lt;br&gt;                        非标准下是离开的时候如果值变了就会触发
            &lt;/em&gt;/&lt;/p&gt;
</content>
    
    <summary type="html">
    
      4.11笔记
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>4.10笔记</title>
    <link href="http://yoursite.com/2016/04/11/4-10%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2016/04/11/4-10笔记/</id>
    <published>2016-04-10T18:15:21.000Z</published>
    <updated>2016-04-10T18:18:48.416Z</updated>
    
    <content type="html">&lt;p&gt;var name = ‘value’;&lt;br&gt;    //oText.name;有问题&lt;br&gt;    //oText[name];OK&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/*
    元素.getAttribute(属性名称);方法 获取指定元素的指定属性的值
*/
//alert(oText.getAttribute(&amp;apos;value&amp;apos;));
/*
    元素.setAttribute(属性名称，属性值);方法 给指定元素指定的属性设置值
*/
//oText.setAttribute(&amp;apos;value&amp;apos;,&amp;apos;HELLO&amp;apos;);
/*
    元素.removeAttribute(属性名称);方法 移除指定的元素的指定的属性
*/
//oText.removeAttribute(&amp;apos;value&amp;apos;);
/*
    1.用.和[]的形式无法操作元素的自定义属性
    getAttribute可以操作元素的自定义属性
*/
//alert(oText._name_);
alert(oText.getAttribute(&amp;apos;_name_&amp;apos;));

var oImg = document.getElementById(img1);
/*
    2.可以获取元素属性实际的值
*/
//alert(oImg.src);
//alert(oImg[src]);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;document.createElement(标签名称);创建元素&lt;br&gt;父级.removeChild(要删除的元素); 删除元素&lt;br&gt;//添加到页面中&lt;br&gt;    /&lt;em&gt;&lt;br&gt;        父级.appendChild(要添加的元素) 方法 追加子元素
    &lt;/em&gt;/&lt;br&gt;    //oUl.appendChild(oLi);&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/*
    父级.insertBefore(新的元素，被插入的元素)方法 在指定的元素前面插入一个新元素
    在ie下如果第二个参数的节点不存在，会报错
    在其他标准浏览器下如果第二个参数的节点不存在，则会以appenChild的形添加式进行
*/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;父级.replaceChild(新节点，被替换节点) 替换子节点&lt;/p&gt;
&lt;p&gt;appendChild,insertBefore,replaceChild都可以操作动态创建出来的节点，也可以操作已有节点&lt;/p&gt;
</content>
    
    <summary type="html">
    
      4.10笔记
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>4.9笔记</title>
    <link href="http://yoursite.com/2016/04/09/4-9%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2016/04/09/4-9笔记/</id>
    <published>2016-04-09T13:21:28.000Z</published>
    <updated>2016-04-09T15:30:48.336Z</updated>
    
    <content type="html">&lt;p&gt;offsetLeft[Top]:只读 属性 当前元素到定位父级的（偏移值）&lt;br&gt;        到当前元素的offsetParent的距离&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;如果没有定位父级
    offsetParent -&amp;gt; body
    offsetLeft -&amp;gt;html

如果有定位父级
    ie7以下:如果自己没有定位，那么offsetLeft[Top]是到body的距离
            如果自己有定位，那么就是到定位父级的距离
    其他:到定位父级的距离
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;width height&lt;br&gt;    style.width：样式宽&lt;br&gt;    clientWidth：可视区宽&lt;br&gt;    offsetWidth：占位宽&lt;br&gt;alert(oDiv.style.width);&lt;br&gt;alert(oDiv.clientWidth);//样式宽+padding 120&lt;br&gt;alert(oDiv.offsetWidth);//样式宽+padding+border 可视区宽+边框 122&lt;/p&gt;
</content>
    
    <summary type="html">
    
      4.9笔记
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>4.8笔记</title>
    <link href="http://yoursite.com/2016/04/09/4-8%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2016/04/09/4-8笔记/</id>
    <published>2016-04-09T13:13:41.000Z</published>
    <updated>2016-04-09T13:16:32.823Z</updated>
    
    <content type="html">&lt;p&gt;元素.firstChild :只读 属性 第一个子节点&lt;br&gt;        标准下：firstChild会包含文本类型的节点&lt;br&gt;        非标准下：只包含元素类型的节点&lt;br&gt;元素.firstElementChild: 只读 属性 标准下获取第一个元素类型的子节点&lt;br&gt;parentNode:只读 属性 当前节点的父级节点&lt;br&gt;parentNode:父节点&lt;br&gt;元素.offsetParent:只读 属性 有定位的父节点&lt;br&gt;        如果没有定位父级，默认是body&lt;br&gt;        ie7以下,如果当前元素没有定位默认是body，如果有定位则是html&lt;br&gt;        ie7以下,如果当前元素的某个父级触发了layout，那么OffsetParent就会被指向到这个触发了layout特性的父节点上&lt;/p&gt;
</content>
    
    <summary type="html">
    
      4.8笔记
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>4.7笔记</title>
    <link href="http://yoursite.com/2016/04/07/4-7%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2016/04/07/4-7笔记/</id>
    <published>2016-04-07T15:23:46.000Z</published>
    <updated>2016-04-07T15:25:43.194Z</updated>
    
    <content type="html">&lt;p&gt;DOM:Document Object Model文档对象模型&lt;br&gt;            文档:html页面&lt;br&gt;            文档对象:页面中元素&lt;br&gt;            文档对象模型:定义 为了能够让程序(js)去操作页面中的元素&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;DOM会把文档看作一颗树,同时定义了很多方法来操作这棵树中的每一个元素(节点)
DOM节点
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;元素.childNodes:只读 属性 子节点列表集合&lt;br&gt;                    标准下：包含了文本和元素类型的节点,但也会包含非法嵌套的子节点&lt;br&gt;                    非标准下：只包含元素类型的节点，ie7以下不会包含非法嵌套子节点&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    childNodes只包含一级子节点，不包含后辈孙级以下的节点

DOM节点的类型有很多种 12种

元素.nodeType:只读 属性 当前元素的节点类型

元素节点:  1
文本节点:  3
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;元素.children :只读 属性 子节点列表集合&lt;br&gt;                    标准下：只包含元素类型的节点&lt;br&gt;                    非标准下：只包含元素类型的节点&lt;/p&gt;
</content>
    
    <summary type="html">
    
      4.7笔记
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>4.6笔记</title>
    <link href="http://yoursite.com/2016/04/06/4-6%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2016/04/06/4-6笔记/</id>
    <published>2016-04-06T12:44:41.000Z</published>
    <updated>2016-04-06T14:52:59.034Z</updated>
    
    <content type="html">&lt;p&gt;var str = “妙味课堂”;&lt;br&gt;str.charCodeAt()所选字符串的字母编码&lt;br&gt;String.fromCharCode(22937)根据编码转换成字符串&lt;br&gt;str.indexOf(‘m’，i)查找数组中m所在位置，i表示从第i位开始查找。返回值为-1，表示没找到&lt;br&gt;str.lastindexOf()表示从右往左找//如果第二个值为负值，默认当成0来处理&lt;br&gt;str.substring(0,2)//截取前两个字符串&lt;br&gt;str.substring(2,0)//截取两个字符串，大的往后扔，小的往前扔；或者如果为负数的话，表示为0&lt;br&gt;str.slice(2,0)//不交换位置，只会从左往左右找，这样什么都找不到&lt;br&gt;str.slice(-2)//跳到尾部第二位开始从左往右找&lt;br&gt;str.slice(-4,-2)&lt;br&gt;str.toUpperCase()//全部转换为大写&lt;br&gt;str.toLowerCase()//全部转换为小写&lt;br&gt;str.split(‘.’);//根据点划分，成为一个数组&lt;br&gt;var str = leo;&lt;br&gt;str.split(‘’);//直接划分成[‘l’,’e’,’o’]&lt;br&gt;split还有个可选参数，表示分割的长度&lt;/p&gt;
</content>
    
    <summary type="html">
    
      4.6笔记
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>4.5笔记</title>
    <link href="http://yoursite.com/2016/04/05/4-5%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2016/04/05/4-5笔记/</id>
    <published>2016-04-05T15:16:14.000Z</published>
    <updated>2016-04-05T15:18:04.395Z</updated>
    
    <content type="html">&lt;p&gt;作为调整，早休息。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      空白
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>4.4笔记</title>
    <link href="http://yoursite.com/2016/04/05/4-4%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2016/04/05/4-4笔记/</id>
    <published>2016-04-05T15:10:48.000Z</published>
    <updated>2016-04-05T15:12:57.281Z</updated>
    
    <content type="html">&lt;p&gt;这一个 月的总结，活的太累，没有规律，想的太多做的太少，其实做软件这个东西对于经验还是更加重要一些，多做练习。多看书多学习吧。少玩游戏早点休息。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      日记
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>4.3笔记</title>
    <link href="http://yoursite.com/2016/04/03/4-3%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2016/04/03/4-3笔记/</id>
    <published>2016-04-03T13:30:40.000Z</published>
    <updated>2016-04-03T13:38:46.797Z</updated>
    
    <content type="html">&lt;p&gt;先写出主要功能，然后放进函数里，吧可变的提取出来，用参数替代。&lt;br&gt;遇到正负的参数，可以采用if语句判断&lt;br&gt;if（endFn）{&lt;br&gt;  endFn（）;&lt;br&gt;};&lt;br&gt;等价于endFn&amp;amp;&amp;amp;endFn();如果前面为真，就执行后面一个函数；&lt;br&gt;上述代码是用来用函数回调的。&lt;br&gt;function getStyle ( obj, attr ) { return obj.currentStyle?obj.currentStyle[attr] : getComputedStyle( obj )[attr]; }&lt;br&gt;上面函数用来获取style里的数值&lt;/p&gt;
</content>
    
    <summary type="html">
    
      函数封装
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>4.2笔记</title>
    <link href="http://yoursite.com/2016/04/02/4-2%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2016/04/02/4-2笔记/</id>
    <published>2016-04-02T15:34:24.000Z</published>
    <updated>2016-04-02T15:44:51.205Z</updated>
    
    <content type="html">&lt;p&gt;真假的问题：数据类型-数字(NAN)、字符串、布尔、函数、对象（elem、[]、{}、null）、未定义&lt;br&gt;真:非0的数字、非空字符串、true、函数、能找到的元素、[]、{}&lt;br&gt;假:0、NAN、空的字符串、false、不能找到的元素、null、未定义&lt;/p&gt;
</content>
    
    <summary type="html">
    
      判断真假
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>4.1笔记</title>
    <link href="http://yoursite.com/2016/04/01/4-1%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2016/04/01/4-1笔记/</id>
    <published>2016-04-01T15:55:00.000Z</published>
    <updated>2016-04-01T16:00:51.872Z</updated>
    
    <content type="html">&lt;p&gt;运算符有$$,||,!;还有加减乘除和取模&lt;br&gt;反选按钮的操作aInp[0].onclick = function(){for(var i = 1; i&amp;lt; aLi.length;i++){aInp.checked = !aInp[i].checked}}&lt;/p&gt;
</content>
    
    <summary type="html">
    
      运算符，运算流程
    
    </summary>
    
    
  </entry>
  
</feed>
